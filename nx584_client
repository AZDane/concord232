#!/usr/bin/env python

import argparse
import pprint
import prettytable

from nx584 import client


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('command')
    parser.add_argument('--zone', default=None, type=int,
                        help='Zone number for zone-related commands')
    parser.add_argument('--partition', default=None, type=int,
                        help='Partition number for partition-related commands')
    parser.add_argument('--stay', default=False, action='store_true')
    parser.add_argument('--host', default='localhost:5000',
                        help='Host and port (localhost:5000)')
    args = parser.parse_args()
    return args


def do_list(clnt, args):
    for zone in clnt.list_zones():
        pprint.pprint(zone)


def do_list_partitions(clnt, args):
    for part in clnt.list_partitions():
        pprint.pprint(part)


def do_arm(clnt, args):
    if args.command == 'arm-stay':
        mode = 'stay'
    elif args.command == 'arm-exit':
        mode = 'exit'
    else:
        mode = 'auto'
    clnt.arm(mode)


def do_summary(clnt, args):
    t = prettytable.PrettyTable(['Zone', 'Name', 'Bypass', 'Status'])
    for zone in clnt.list_zones():
        t.add_row(['%i' % zone['number'], zone['name'],
                   zone['bypassed'] and 'bypass' or '-',
                   '%s' % (zone['state'] or False)])
    print(t)

    for i, part in enumerate(clnt.list_partitions()):
        status = 'Partition %i %s' % (part['number'],
                                      part['armed'] and 'armed' or 'disarmed')
        if part['armed'] or i == 0:
            print(status)


def do_bypass(clnt, args):
    if args.command == 'bypass':
        clnt.set_bypass(args.zone, True)
    elif args.command == 'unbypass':
        clnt.set_bypass(args.zone, False)


def do_show(clnt, args):
    if args.zone:
        for zone in clnt.list_zones():
            if zone['number'] == args.zone:
                pprint.pprint(zone)
                return
        print('No such zone `%s\'' % args.zone)
    elif args.partition:
        for part in clnt.list_partitions():
            if part['number'] == args.partition:
                pprint.pprint(part)
                return
        print('No such partition `%s\'' % args.partition)
    else:
        print('Zone or Partition required')

def main():
    args = parse_args()
    url = 'http://%s:%s' % tuple(args.host.split(':', 1))
    clnt = client.Client(url)
    if args.command == 'list':
        do_list(clnt, args)
    elif args.command in ['arm', 'arm-stay', 'arm-exit', 'arm-auto']:
        do_arm(clnt, args)
    elif args.command == 'partitions':
        do_list_partitions(clnt, args)
    elif args.command == 'summary':
        do_summary(clnt, args)
    elif args.command in ['bypass', 'unbypass']:
        do_bypass(clnt, args)
    elif args.command == 'show':
        do_show(clnt, args)


if __name__ == '__main__':
    main()
